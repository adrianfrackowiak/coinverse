import {
  Box,
  Container,
  Grid,
  GridItem,
  Heading,
  Image,
  Spacer,
  Text,
  Wrap,
} from "@chakra-ui/react";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { useCoinData } from "../../app/hooks/useData";
import { Header } from "../../components/Header";
import { Breadcrumb } from "../../components/Coin/Breadcrumb";
import { TriangleDownIcon, TriangleUpIcon } from "@chakra-ui/icons";
import { AboutCoin } from "../../components/Coin/AboutCoin";
import { useDispatch, useSelector } from "react-redux";
import {
  currentCoinState,
  setCurrentCoinId,
} from "../../app/features/appSlice";
import { ChartBox } from "../../components/Coin/Chart";

const CoinPage: React.FC = () => {
  const router = useRouter();
  const dispatch = useDispatch();
  const stateCoinId = useSelector(currentCoinState);
  const routerCoinId = router.query.coin;
  const { data, isLoading, isError } = useCoinData(
    typeof routerCoinId === "string" ? routerCoinId : ""
  );
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    if (typeof routerCoinId === "string")
      dispatch(setCurrentCoinId(routerCoinId));
  }, [routerCoinId, dispatch]);

  useEffect(() => {
    if (!data && !isLoading) router.push("/");
  }, [data, isLoading, router]);

  useEffect(() => {
    if (stateCoinId && routerCoinId && data && !isLoading) {
      setLoading(false);
    }
  }, [data, isLoading, loading, router, routerCoinId, stateCoinId]);

  if (isError) console.error(isError);
  if (loading) return <p>Loading...</p>;

  return (
    <div>
      <Head>
        <title>
          {data.name} price today, {data.symbol} live | CoinVerse
        </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box fontFamily="main" fontSize="0.875rem" fontWeight={500}>
        <Header />
        <Container
          maxW="1400px"
          display="flex"
          h="full"
          alignItems="center"
          justifyContent="center"
        >
          <Box width="full" py={10}>
            <Breadcrumb coin={data.name} />
            <Box py={10} display="flex" alignItems="flex-start">
              <AboutCoin />
              <Spacer />
              <Wrap width="68%">
                <Box px={10} borderRight="1px" borderColor="gray.200">
                  <Text
                    fontSize="0.75rem"
                    fontWeight={600}
                    color="gray.600"
                    display="inline-flex"
                  >
                    {data.name} Price (
                    <Text textTransform="uppercase">{data.symbol}</Text>)
                  </Text>
                  <Box display="flex" alignItems="center" mb={2}>
                    <Heading>
                      $
                      {Intl.NumberFormat("en-US").format(
                        data.market_data.current_price.usd
                      )}
                    </Heading>
                    <Text
                      py={0.5}
                      px={2}
                      borderRadius={4}
                      ml={3}
                      fontWeight={700}
                      color="white"
                      background={
                        data.market_data.price_change_percentage_24h > 0
                          ? "#16C784"
                          : "#EA3943"
                      }
                    >
                      {data.market_data.price_change_percentage_24h > 0 ? (
                        <TriangleUpIcon fontSize="0.6rem" mr={1} />
                      ) : (
                        <TriangleDownIcon fontSize="0.6rem" mr={1} />
                      )}
                      {data.market_data.price_change_percentage_24h.toFixed(2)}{" "}
                      %
                    </Text>
                  </Box>
                  <Text color="gray.500" display="flex">
                    {data.market_data.current_price.btc.toFixed(10)} BTC{" "}
                    {data.market_data.price_change_24h_in_currency.btc !==
                      0 && (
                      <Text
                        ml={2}
                        color={
                          data.market_data.price_change_24h_in_currency.btc > 0
                            ? "green"
                            : "red"
                        }
                      >
                        {(
                          (data.market_data.price_change_24h_in_currency.btc /
                            data.market_data.current_price.btc) *
                          100
                        ).toFixed(2)}{" "}
                        %
                      </Text>
                    )}
                  </Text>
                  <Text color="gray.500" display="flex">
                    {data.market_data.current_price.eth.toFixed(10)} ETH{" "}
                    <Text
                      ml={2}
                      color={
                        data.market_data.price_change_24h_in_currency.eth > 0
                          ? "green"
                          : "red"
                      }
                    >
                      {(
                        (data.market_data.price_change_24h_in_currency.eth /
                          data.market_data.current_price.eth) *
                        100
                      ).toFixed(2)}{" "}
                      %
                    </Text>
                  </Text>
                </Box>
                <Grid
                  templateRows="repeat(2, 1fr)"
                  templateColumns="repeat(2, 1fr)"
                  gap={6}
                >
                  <GridItem px={10}>
                    <Text
                      fontSize="0.75rem"
                      fontWeight={600}
                      color="gray.600"
                      display="inline-flex"
                    >
                      Market Cap
                    </Text>
                    <Text fontSize="1rem" fontWeight={600}>
                      $
                      {Intl.NumberFormat("en-US").format(
                        data.market_data.market_cap.usd
                      )}
                    </Text>
                  </GridItem>
                  <GridItem px={10}>
                    <Text
                      fontSize="0.75rem"
                      fontWeight={600}
                      color="gray.600"
                      display="inline-flex"
                    >
                      Volume 24h
                    </Text>
                    <Text fontSize="1rem" fontWeight={600}>
                      $
                      {Intl.NumberFormat("en-US").format(
                        data.market_data.total_volume.usd
                      )}
                    </Text>
                  </GridItem>

                  <GridItem px={10}>
                    <Text
                      fontSize="0.75rem"
                      fontWeight={600}
                      color="gray.600"
                      display="inline-flex"
                    >
                      Circulating Supply
                    </Text>
                    <Text
                      fontSize="1rem"
                      fontWeight={600}
                      textTransform="uppercase"
                    >
                      {Intl.NumberFormat("en-US").format(
                        data.market_data.circulating_supply.toFixed(0)
                      )}{" "}
                      {data.symbol}
                    </Text>
                  </GridItem>
                  <GridItem px={10}>
                    <Text
                      fontSize="0.75rem"
                      fontWeight={600}
                      color="gray.600"
                      display="inline-flex"
                    >
                      Max Supply
                    </Text>
                    <Text
                      fontSize="1rem"
                      fontWeight={600}
                      textTransform="uppercase"
                    >
                      {data.market_data.max_supply
                        ? Intl.NumberFormat("en-US").format(
                            data.market_data.max_supply
                          )
                        : "--"}{" "}
                      {data.symbol}
                    </Text>
                  </GridItem>
                </Grid>
                <Box maxW="full" px={10} pt={6}>
                  <Box
                    dangerouslySetInnerHTML={{ __html: data.description.en }}
                  />
                </Box>
              </Wrap>
            </Box>
            <ChartBox />
          </Box>
        </Container>
      </Box>
    </div>
  );
};

export default CoinPage;
